import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from tkinter import font as tkfont
import cv2
from PIL import Image, ImageTk
from ultralytics import YOLO
import os
import numpy as np
from datetime import datetime


class WasteRecognitionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Garbage Identify")
        self.root.state('zoomed')
        self.root.configure(bg="#f4f6f9")

        # ===== C·∫§U HINH FONT =====
        self.title_font = tkfont.Font(family="Segoe UI", size=24, weight="bold")
        self.subtitle_font = tkfont.Font(family="Segoe UI", size=12)
        self.button_font = tkfont.Font(family="Segoe UI", size=11, weight="bold")

        # ===== BI·∫æN H·ªÜ TH·ªêNG =====
        self.cap = None
        self.running = False
        self.model = None
        self.detection_count = 0
        self.detection_dir = "detections"
        self.history_window = None  # Cho l·ªãch s·ª≠

        # T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh
        if not os.path.exists(self.detection_dir):
            os.makedirs(self.detection_dir)

        # ƒê·ªãnh nghƒ©a c√°c nh√≥m r√°c th·∫£i d·ª±a tr√™n file data.yaml
        # 0: bottle, 1: straw, 2: bag, 3: HDPE (R√°c th·∫£i nh·ª±a: 0-3)
        # 4: glass, 5: card_board, 6: metal, 7: pin, 8: paper (R√°c th·∫£i r·∫Øn: 4-8)
        # 9: nylon (Nylon: 9)
        # 10: bang_gat, 11: glove, 12: kim_tiem, 13: mask (R√°c th·∫£i y t·∫ø: 10-13)
        self.waste_groups = {
            "R√°c th·∫£i nh·ª±a ‚ôªÔ∏è (0-3)": [0, 1, 2, 3],
            "R√°c th·∫£i r·∫Øn üß± (4-8)": [4, 5, 6, 7, 8],
            "Nylon üõçÔ∏è (9)": [9],
            "R√°c th·∫£i y t·∫ø üíâ (10-13)": [10, 11, 12, 13]
        }
        self.initial_camera_text = "Camera ch∆∞a b·∫≠t"
        self.initial_result_text = "Ch∆∞a c√≥ d·ªØ li·ªáu nh·∫≠n di·ªán."

        # ===== T·∫¢I MODEL =====
        self.load_model()

        # ===== GIAO DI·ªÜN CH√çNH =====
        self.setup_ui()

    def load_model(self):
        model_path = os.path.join(os.path.dirname(__file__), "ModelAI.pt")
        if os.path.exists(model_path):
            try:
                self.model = YOLO(model_path)
                self.status_text = "S·∫µn s√†ng: Model YOLOv8 ƒë√£ t·∫£i th√†nh c√¥ng"
            except Exception as e:
                self.model = None
                self.status_text = f"L·ªói t·∫£i model: {e}"
        else:
            self.model = None
            self.status_text = "C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file ModelAI.pt"

    def setup_ui(self):
        # ===== HEADER =====
        header = tk.Frame(self.root, bg="#2c3e50", height=80)
        header.pack(fill=tk.X)
        header.pack_propagate(False)

        header.grid_rowconfigure(0, weight=1)
        header.grid_rowconfigure(1, weight=1)
        header.grid_columnconfigure(0, weight=1)

        tk.Label(
            header,
            text="Garbage Identify",
            font=("Segoe UI", 26, "bold"),
            bg="#2c3e50",
            fg="#1abc9c",
            anchor="w"
        ).grid(row=0, column=0, sticky="w", padx=25, pady=(12, 0))

        tk.Label(
            header,
            text="Nh·∫≠n di·ªán & Ph√¢n lo·∫°i R√°c th·∫£i b·∫±ng AI",
            font=("Segoe UI", 11),
            bg="#2c3e50",
            fg="#bdc3c7",
            anchor="w"
        ).grid(row=1, column=0, sticky="w", padx=25, pady=(0, 12))

        # ===== MAIN CONTAINER =====
        main_container = tk.Frame(self.root, bg="#f4f6f9")
        main_container.pack(expand=True, fill=tk.BOTH, padx=25, pady=20)

        # ===== LEFT PANEL: CAMERA =====
        left_panel = tk.Frame(main_container, bg="white", relief=tk.SOLID, bd=1)
        left_panel.pack(side=tk.LEFT, expand=True, fill=tk.BOTH, padx=(0, 15))

        cam_title = tk.Label(
            left_panel,
            text="Camera Tr·ª±c Ti·∫øp",
            font=self.subtitle_font,
            bg="white",
            fg="#34495e",
            anchor="w"
        )
        cam_title.pack(anchor="w", padx=15, pady=(15, 5))

        self.camera_frame = tk.Frame(left_panel, bg="#ecf0f1", bd=2, relief=tk.SUNKEN)
        self.camera_frame.pack(expand=True, fill=tk.BOTH, padx=15, pady=(0, 15))

        self.camera_label = tk.Label(self.camera_frame, bg="#ecf0f1", text=self.initial_camera_text,
                                     font=("Segoe UI", 12), fg="#7f8c8d")
        self.camera_label.pack(expand=True)

        # ===== RIGHT PANEL: K·∫æT QU·∫¢ & N√öT =====
        right_panel = tk.Frame(main_container, bg="#f4f6f9", width=300)
        right_panel.pack(side=tk.RIGHT, fill=tk.Y, padx=(15, 0))
        right_panel.pack_propagate(False)

        tk.Label(
            right_panel,
            text="ƒêi·ªÅu khi·ªÉn & K·∫øt qu·∫£",
            font=self.subtitle_font,
            bg="#f4f6f9",
            fg="#2c3e50",
            anchor="w"
        ).pack(anchor="w", pady=(0, 15))

        # ===== N√öT ƒêI·ªÄU KHI·ªÇN =====
        style = ttk.Style()
        style.theme_use('clam')

        style.configure("Green.TButton", background="#1abc9c", foreground="white", font=self.button_font, padding=12)
        style.map("Green.TButton", background=[('active', '#16a085')])

        style.configure("Blue.TButton", background="#3498db", foreground="white", font=self.button_font, padding=12)
        style.map("Blue.TButton", background=[('active', '#2980b9')])

        style.configure("Gray.TButton", background="#95a5a6", foreground="white", font=self.button_font, padding=12)
        style.map("Gray.TButton", background=[('active', '#7f8c8d')])

        style.configure("Orange.TButton", background="#e67e22", foreground="white", font=self.button_font, padding=12)
        style.map("Orange.TButton", background=[('active', '#d35400')])

        btn_frame = tk.Frame(right_panel, bg="#f4f6f9")
        btn_frame.pack(pady=10, fill=tk.X, padx=15)

        self.start_button = ttk.Button(btn_frame, text="B·∫≠t Camera", style="Green.TButton", command=self.toggle_camera)
        self.start_button.pack(fill=tk.X, pady=8)

        self.upload_button = ttk.Button(btn_frame, text="T·∫£i ·∫¢nh L√™n", style="Blue.TButton", command=self.upload_image)
        self.upload_button.pack(fill=tk.X, pady=8)

        self.capture_button = ttk.Button(btn_frame, text="Ch·ª•p ·∫¢nh", style="Gray.TButton", command=self.capture_image)
        self.capture_button.pack(fill=tk.X, pady=8)
        self.capture_button.pack_forget()

        self.history_button = ttk.Button(btn_frame, text="Xem L·ªãch S·ª≠", style="Orange.TButton",
                                         command=self.open_history)
        self.history_button.pack(fill=tk.X, pady=8)

        # ===== V√ôNG K·∫æT QU·∫¢ NH·∫¨N DI·ªÜN =====
        result_frame = tk.LabelFrame(right_panel, text=" K·∫øt qu·∫£ nh·∫≠n di·ªán ", font=self.subtitle_font, bg="white",
                                     fg="#2c3e50", bd=1, relief=tk.SOLID, padx=15, pady=15)
        result_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=20)

        self.result_text = tk.Text(result_frame, height=10, font=("Consolas", 10), bg="#f8f9fa", fg="#2c3e50", bd=0,
                                   relief=tk.FLAT, wrap=tk.WORD)
        self.result_text.pack(fill=tk.BOTH, expand=True)
        self.result_text.insert(tk.END, self.initial_result_text)
        self.result_text.config(state=tk.DISABLED)

        # ===== THANH TR·∫†NG TH√ÅI =====
        status_frame = tk.Frame(self.root, bg="#34495e", height=40)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM)
        status_frame.pack_propagate(False)

        self.status_label = tk.Label(status_frame, text=self.status_text, font=("Segoe UI", 10), bg="#34495e",
                                     fg="#bdc3c7", anchor="w")
        self.status_label.pack(side=tk.LEFT, padx=20, pady=10)

        self.update_status(self.status_text)

    def update_status(self, text, color="#bdc3c7"):
        self.status_label.config(text=text, fg=color)
        self.root.update_idletasks()

    def get_next_filename(self):
        """T·∫°o t√™n file theo th·ª© t·ª±: detect_001.jpg"""
        self.detection_count += 1
        return os.path.join(self.detection_dir, f"detect_{self.detection_count:03d}.jpg")

    def toggle_camera(self):
        if self.running:
            self.stop_camera()
        else:
            self.start_camera()

    def start_camera(self):
        if not self.model:
            self.update_status("L·ªói: Model ch∆∞a t·∫£i!", "#e74c3c")
            return

        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            self.update_status("Kh√¥ng th·ªÉ m·ªü camera", "#e74c3c")
            return

        self.running = True
        self.start_button.config(text="T·∫Øt Camera")
        self.upload_button.config(state=tk.DISABLED)
        self.capture_button.pack(fill=tk.X, pady=8)
        self.update_status("Camera ƒëang ch·∫°y...", "#1abc9c")
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, "ƒêang qu√©t camera...\n")
        self.result_text.config(state=tk.DISABLED)
        self.update_frame()

    def format_results(self, results):
        """Ph√¢n lo·∫°i v√† ƒë·ªãnh d·∫°ng k·∫øt qu·∫£ nh·∫≠n di·ªán theo 4 nh√≥m r√°c th·∫£i (kh√¥ng ƒë·∫øm s·ªë l∆∞·ª£ng)."""

        # 1. L·∫•y class ID (int) t·ª´ k·∫øt qu·∫£ YOLO
        all_class_ids = [int(box.cls[0]) for r in results for box in r.boxes]
        unique_class_ids = set(all_class_ids)  # Ch·ªâ l·∫•y c√°c class_id duy nh·∫•t

        # 2. Gom nh√≥m theo lo·∫°i r√°c th·∫£i
        grouped_results = {}
        for group_name, group_ids in self.waste_groups.items():
            detected_labels_in_group = []  # D√πng list ƒë·ªÉ gi·ªØ th·ª© t·ª±
            for class_id in group_ids:
                if class_id in unique_class_ids:  # Ki·ªÉm tra xem class_id n√†y c√≥ ƒë∆∞·ª£c ph√°t hi·ªán kh√¥ng
                    label = self.model.names.get(class_id, f"Class {class_id}")
                    if label not in detected_labels_in_group:  # Tr√°nh tr√πng l·∫∑p t√™n nh√£n
                        detected_labels_in_group.append(label)

            if detected_labels_in_group:
                # Y√äU C·∫¶U M·ªöI: Ch·ªâ th√™m t√™n nh√£n, kh√¥ng th√™m s·ªë l∆∞·ª£ng
                grouped_results[group_name] = [f"‚Ä¢ {label}" for label in detected_labels_in_group]

        # 3. ƒê·ªãnh d·∫°ng th√†nh chu·ªói hi·ªÉn th·ªã
        total_detections = len(all_class_ids)

        # N·∫øu kh√¥ng ph√°t hi·ªán v·∫≠t th·ªÉ HO·∫∂C kh√¥ng c√≥ v·∫≠t th·ªÉ n√†o thu·ªôc nh√≥m
        if total_detections == 0 or not grouped_results:
            return "Kh√¥ng ph√°t hi·ªán r√°c th·∫£i."

        # Y√äU C·∫¶U M·ªöI: B·ªè d√≤ng ƒë·∫øm t·ªïng s·ªë
        display_text = ""

        for group_name, items in grouped_results.items():
            display_text += f"\n--- {group_name} ---\n"
            display_text += "\n".join(items) + "\n"

        # Tr·∫£ v·ªÅ chu·ªói ƒë√£ lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a ·ªü ƒë·∫ßu/cu·ªëi
        return display_text.strip()

    def update_frame(self):
        if not self.running:
            return

        ret, frame = self.cap.read()
        if not ret:
            self.root.after(30, self.update_frame)
            return

        try:
            # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc khung h√¨nh cho ph√π h·ª£p v·ªõi khu v·ª±c hi·ªÉn th·ªã
            h, w = frame.shape[:2]
            target_w = 780
            target_h = 480
            # T√≠nh t·ªâ l·ªá ƒë·ªÉ gi·ªØ t·ªâ l·ªá khung h√¨nh n·∫øu c·∫ßn. ·ªû ƒë√¢y d√πng fixed size (780, 480) nh∆∞ code g·ªëc
            frame_processed = cv2.resize(frame, (target_w, target_h))

            results = self.model(frame_processed, conf=0.25, verbose=False)
            annotated_frame = results[0].plot()

            # --- C·∫£i ti·∫øn: Ph√¢n lo·∫°i k·∫øt qu·∫£ nh·∫≠n di·ªán ---
            formatted_text = self.format_results(results)

            self.result_text.config(state=tk.NORMAL)
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, formatted_text)
            self.result_text.config(state=tk.DISABLED)

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh status
            if "Kh√¥ng ph√°t hi·ªán" in formatted_text:
                self.update_status("Kh√¥ng ph√°t hi·ªán v·∫≠t th·ªÉ", "#95a5a6")
            else:
                detected_groups = [name.split()[0] for name in self.waste_groups.keys() if name in formatted_text]
                if detected_groups:
                    self.update_status(f"Ph√°t hi·ªán nh√≥m: {', '.join(detected_groups)}", "#1abc9c")
                else:
                    self.update_status("ƒê√£ ph√°t hi·ªán v·∫≠t th·ªÉ", "#1abc9c")

            # Hi·ªÉn th·ªã khung h√¨nh
            frame_rgb = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame_rgb)
            imgtk = ImageTk.PhotoImage(image=img)
            self.camera_label.imgtk = imgtk
            self.camera_label.configure(image=imgtk, text="")

        except Exception as e:
            print(f"L·ªói camera: {e}")

        self.root.after(30, self.update_frame)

    def capture_image(self):
        """Ch·ª•p ·∫£nh ‚Üí L∆∞u ·∫£nh + file .txt ‚Üí T·∫Øt camera ‚Üí Hi·ªÉn th·ªã ·∫£nh + k·∫øt qu·∫£"""
        if not self.cap or not self.running:
            return

        ret, frame = self.cap.read()
        if not ret:
            self.update_status("L·ªói ch·ª•p ·∫£nh", "#e74c3c")
            return

        # Resize ƒë·ªÉ x·ª≠ l√Ω
        frame_resized = cv2.resize(frame, (780, 480))
        results = self.model(frame_resized, conf=0.25, verbose=False)
        annotated_frame = results[0].plot()

        # --- Ph√¢n lo·∫°i k·∫øt qu·∫£ nh·∫≠n di·ªán ---
        formatted_text = self.format_results(results)

        # L∆∞u ·∫£nh
        output_path = self.get_next_filename()
        cv2.imwrite(output_path, annotated_frame)

        # --- Y√äU C·∫¶U M·ªöI: L∆∞u th√¥ng tin ph√¢n lo·∫°i v√†o file .txt ---
        try:
            txt_path = os.path.splitext(output_path)[0] + ".txt"
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(formatted_text)
        except Exception as e:
            print(f"L·ªói l∆∞u file txt: {e}")
        # --- K·∫æT TH√öC THAY ƒê·ªîI ---

        # C·∫≠p nh·∫≠t giao di·ªán ·∫£nh
        frame_rgb = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(frame_rgb)
        imgtk = ImageTk.PhotoImage(image=img)
        self.camera_label.imgtk = imgtk
        self.camera_label.configure(image=imgtk, text="")

        # C·∫≠p nh·∫≠t v√πng k·∫øt qu·∫£
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, formatted_text)
        self.result_text.config(state=tk.DISABLED)

        # C·∫≠p nh·∫≠t tr·∫°ng th√°i
        filename = os.path.basename(output_path)
        self.update_status(f"ƒê√£ ch·ª•p & l∆∞u: {filename}", "#1abc9c")

        # T·∫Øt camera
        self.stop_camera(revert_label=False)  # Gi·ªØ l·∫°i ·∫£nh ch·ª•p tr√™n camera_label

    def upload_image(self):
        """T·∫£i ·∫£nh ‚Üí X·ª≠ l√Ω ‚Üí Hi·ªÉn th·ªã + l∆∞u ·∫£nh + l∆∞u file .txt"""
        if self.running:
            self.stop_camera()

        file_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh r√°c th·∫£i",
            filetypes=[("H√¨nh ·∫£nh", "*.jpg *.jpeg *.png *.bmp")]
        )
        if not file_path:
            return

        try:
            frame = cv2.imread(file_path)
            if frame is None:
                self.update_status("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh", "#e74c3c")
                return

            frame_resized = cv2.resize(frame, (780, 480))
            results = self.model(frame_resized, conf=0.25, verbose=False)
            annotated_frame = results[0].plot()

            # --- Ph√¢n lo·∫°i k·∫øt qu·∫£ nh·∫≠n di·ªán ---
            formatted_text = self.format_results(results)

            # L∆∞u ·∫£nh
            output_path = self.get_next_filename()
            cv2.imwrite(output_path, annotated_frame)

            # --- Y√äU C·∫¶U M·ªöI: L∆∞u th√¥ng tin ph√¢n lo·∫°i v√†o file .txt ---
            try:
                txt_path = os.path.splitext(output_path)[0] + ".txt"
                with open(txt_path, 'w', encoding='utf-8') as f:
                    f.write(formatted_text)
            except Exception as e:
                print(f"L·ªói l∆∞u file txt: {e}")
            # --- K·∫æT TH√öC THAY ƒê·ªîI ---

            # Hi·ªÉn th·ªã ·∫£nh
            frame_rgb = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)
            img = Image.fromarray(frame_rgb)
            imgtk = ImageTk.PhotoImage(image=img)
            self.camera_label.imgtk = imgtk
            self.camera_label.configure(image=imgtk, text="")

            # C·∫≠p nh·∫≠t k·∫øt qu·∫£
            self.result_text.config(state=tk.NORMAL)
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, formatted_text)
            self.result_text.config(state=tk.DISABLED)

            self.update_status(f"ƒê√£ x·ª≠ l√Ω & l∆∞u: {os.path.basename(output_path)}", "#1abc9c")

        except Exception as e:
            self.update_status(f"L·ªói x·ª≠ l√Ω ·∫£nh: {e}", "#e74c3c")

    def stop_camera(self, revert_label=True):
        """D·ª´ng camera v√† kh√¥i ph·ª•c giao di·ªán n·∫øu revert_label=True (t·∫Øt camera).
        N·∫øu revert_label=False (ch·ª•p ·∫£nh), gi·ªØ l·∫°i ·∫£nh tr√™n camera_label."""
        self.running = False
        if self.cap:
            self.cap.release()
            self.cap = None

        self.start_button.config(text="B·∫≠t Camera")
        self.upload_button.config(state=tk.NORMAL)
        self.capture_button.pack_forget()

        # --- C·∫£i ti·∫øn: Kh√¥i ph·ª•c n·ªÅn c≈© khi t·∫Øt camera ---
        if revert_label:
            # ƒê·∫£m b·∫£o camera_label kh√¥ng gi·ªØ tham chi·∫øu ƒë·∫øn ·∫£nh c≈©
            self.camera_label.imgtk = None
            self.camera_label.config(image='', text=self.initial_camera_text, fg="#7f8c8d")

            self.result_text.config(state=tk.NORMAL)
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, self.initial_result_text)
            self.result_text.config(state=tk.DISABLED)

            self.update_status(self.status_text)  # Kh√¥i ph·ª•c status sau khi load model

    # ===== [START] H√ÄM ƒê√É THAY ƒê·ªîI (Th√™m canh gi·ªØa) =====
    def open_history(self):
        """M·ªü c·ª≠a s·ªï xem l·∫°i ·∫£nh (ch·ªâ 1 l·∫ßn)"""
        if hasattr(self, 'history_window') and self.history_window and self.history_window.winfo_exists():
            self.history_window.lift()
            return

        if not os.path.exists(self.detection_dir) or not os.listdir(self.detection_dir):
            messagebox.showinfo("L·ªãch s·ª≠", "Ch∆∞a c√≥ ·∫£nh n√†o ƒë∆∞·ª£c l∆∞u.")
            return

        self.history_window = tk.Toplevel(self.root)
        self.history_window.title("L·ªãch S·ª≠ Ph√°t Hi·ªán")
        # K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh cho c·ª≠a s·ªï l·ªãch s·ª≠
        window_width = 900
        window_height = 600

        self.history_window.configure(bg="#f4f6f9")
        self.history_window.protocol("WM_DELETE_WINDOW", self.on_history_close)

        # ===== Y√äU C·∫¶U M·ªöI: Canh gi·ªØa c·ª≠a s·ªï =====
        # L·∫•y k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ c·ª≠a s·ªï ch√≠nh
        main_x = self.root.winfo_x()
        main_y = self.root.winfo_y()
        main_width = self.root.winfo_width()
        main_height = self.root.winfo_height()

        # T√≠nh to√°n v·ªã tr√≠ x, y ƒë·ªÉ canh gi·ªØa
        center_x = main_x + (main_width // 2) - (window_width // 2)
        center_y = main_y + (main_height // 2) - (window_height // 2)

        # √Åp d·ª•ng v·ªã tr√≠ v√† k√≠ch th∆∞·ªõc
        self.history_window.geometry(f"{window_width}x{window_height}+{center_x}+{center_y}")
        self.history_window.resizable(False, False)  # C·ªë ƒë·ªãnh k√≠ch th∆∞·ªõc
        # ===== K·∫æT TH√öC THAY ƒê·ªîI =====

        tk.Label(
            self.history_window,
            text="C√°c ·∫£nh ƒë√£ ph√°t hi·ªán (Nh·∫•n ƒë·ªÉ xem chi ti·∫øt)",  # H∆∞·ªõng d·∫´n
            font=("Segoe UI", 16, "bold"),
            bg="#f4f6f9",
            fg="#2c3e50"
        ).pack(pady=15)

        canvas = tk.Canvas(self.history_window, bg="#f4f6f9", highlightthickness=0)
        scrollbar = ttk.Scrollbar(self.history_window, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#f4f6f9")

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        image_files = sorted(
            [f for f in os.listdir(self.detection_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))],
            key=lambda x: os.path.getctime(os.path.join(self.detection_dir, x)),
            reverse=True  # Hi·ªÉn th·ªã ·∫£nh m·ªõi nh·∫•t tr∆∞·ªõc
        )

        cols = 4
        for idx, filename in enumerate(image_files):
            path = os.path.join(self.detection_dir, filename)
            txt_path = os.path.splitext(path)[0] + ".txt"
            try:
                img = Image.open(path)
                img.thumbnail((180, 180))
                photo = ImageTk.PhotoImage(img)

                frame = tk.Frame(scrollable_frame, bg="white", relief=tk.SOLID, bd=1)
                frame.grid(row=idx // cols, column=idx % cols, padx=10, pady=10)

                lbl_img = tk.Label(frame, image=photo, bg="white", cursor="hand2")
                lbl_img.image = photo
                lbl_img.pack()

                info = f"{filename}\n{datetime.fromtimestamp(os.path.getctime(path)).strftime('%H:%M %d/%m/%Y')}"
                lbl_info = tk.Label(frame, text=info, font=("Segoe UI", 9), bg="white", fg="#34495e", justify=tk.CENTER)
                lbl_info.pack(pady=5)

                lbl_img.bind("<Button-1>", lambda e, p=path, t=txt_path: self.show_history_detail(p, t))

            except Exception as e:
                print(f"Kh√¥ng load ƒë∆∞·ª£c ·∫£nh: {e}")

        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=15)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.history_window.transient(self.root)
        self.history_window.grab_set()

    # ===== [END] H√ÄM ƒê√É THAY ƒê·ªîI =====

    def on_history_close(self):
        self.history_window.grab_release()
        self.history_window.destroy()
        self.history_window = None

    # ===== [START] H√ÄM ƒê√É THAY ƒê·ªîI (Th√™m canh gi·ªØa) =====
    def show_history_detail(self, image_path, txt_path):
        """Hi·ªÉn th·ªã chi ti·∫øt ·∫£nh v√† k·∫øt qu·∫£ ph√¢n lo·∫°i."""

        detail_window = tk.Toplevel(self.root)
        detail_window.title(os.path.basename(image_path))
        detail_window.configure(bg="#f4f6f9")

        # --- Frame ch√≠nh ---
        main_frame = tk.Frame(detail_window, bg="#f4f6f9")
        main_frame.pack(expand=True, fill=tk.BOTH, padx=20, pady=20)

        # --- 1. Hi·ªÉn th·ªã ·∫£nh (b√™n tr√°i) ---
        img_frame = tk.Frame(main_frame, bg="white", bd=1, relief=tk.SOLID)
        img_frame.pack(side=tk.LEFT, expand=True, fill=tk.BOTH, padx=(0, 10))

        try:
            img = Image.open(image_path)

            # Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc ·∫£nh xem full
            max_w = self.root.winfo_screenwidth() * 0.6
            max_h = self.root.winfo_screenheight() * 0.7

            current_w, current_h = img.size

            if current_w > max_w or current_h > max_h:
                ratio = min(max_w / current_w, max_h / current_h)
                new_w = int(current_w * ratio)
                new_h = int(current_h * ratio)
                img = img.resize((new_w, new_h),
                                 Image.Resampling.LANCZOS if hasattr(Image, 'Resampling') else Image.LANCZOS)

            photo = ImageTk.PhotoImage(img)
            lbl_img = tk.Label(img_frame, image=photo, bg="white")
            lbl_img.image = photo
            lbl_img.pack(padx=10, pady=10)
        except Exception as e:
            tk.Label(img_frame, text=f"L·ªói t·∫£i ·∫£nh: {e}", bg="white").pack(padx=10, pady=10)

        # --- 2. Hi·ªÉn th·ªã k·∫øt qu·∫£ (b√™n ph·∫£i) ---
        result_frame = tk.LabelFrame(main_frame, text=" K·∫øt qu·∫£ ph√¢n lo·∫°i ", font=self.subtitle_font, bg="white",
                                     fg="#2c3e50", bd=1, relief=tk.SOLID, padx=15, pady=15)
        result_frame.pack(side=tk.RIGHT, fill=tk.BOTH, padx=(10, 0))

        # ƒê·ªçc th√¥ng tin t·ª´ file .txt
        info_text = "Kh√¥ng c√≥ th√¥ng tin ph√¢n lo·∫°i."
        if os.path.exists(txt_path):
            with open(txt_path, 'r', encoding='utf-8') as f:
                info_text = f.read()

        if not info_text.strip():
            info_text = "Kh√¥ng ph√°t hi·ªán r√°c th·∫£i."

        # Hi·ªÉn th·ªã text
        txt_display = tk.Text(result_frame, font=("Consolas", 10), bg="#f8f9fa", fg="#2c3e50", bd=0,
                              relief=tk.FLAT, wrap=tk.WORD, width=40, height=20)
        txt_display.pack(fill=tk.BOTH, expand=True)
        txt_display.insert(tk.END, info_text)
        txt_display.config(state=tk.DISABLED)

        # ===== Y√äU C·∫¶U M·ªöI: Canh gi·ªØa c·ª≠a s·ªï =====
        # Ph·∫£i update ƒë·ªÉ tkinter t√≠nh to√°n k√≠ch th∆∞·ªõc th·ª±c t·∫ø c·ªßa c·ª≠a s·ªï
        detail_window.update_idletasks()

        # L·∫•y k√≠ch th∆∞·ªõc c·ª≠a s·ªï chi ti·∫øt SAU KHI ƒë√£ th√™m n·ªôi dung
        popup_width = detail_window.winfo_width()
        popup_height = detail_window.winfo_height()

        # L·∫•y k√≠ch th∆∞·ªõc v√† v·ªã tr√≠ c·ª≠a s·ªï ch√≠nh
        main_x = self.root.winfo_x()
        main_y = self.root.winfo_y()
        main_width = self.root.winfo_width()
        main_height = self.root.winfo_height()

        # T√≠nh to√°n v·ªã tr√≠ x, y ƒë·ªÉ canh gi·ªØa
        center_x = main_x + (main_width // 2) - (popup_width // 2)
        center_y = main_y + (main_height // 2) - (popup_height // 2)

        detail_window.geometry(f"{popup_width}x{popup_height}+{center_x}+{center_y}")
        detail_window.resizable(False, False)  # C·ªë ƒë·ªãnh k√≠ch th∆∞·ªõc
        # ===== K·∫æT TH√öC THAY ƒê·ªîI =====

        detail_window.transient(self.root)
        detail_window.grab_set()

    # ===== [END] H√ÄM ƒê√É THAY ƒê·ªîI =====

    def on_closing(self):
        self.running = False
        if self.cap:
            self.cap.release()
        self.root.destroy()


if __name__ == "__main__":
    root = tk.Tk()
    app = WasteRecognitionApp(root)
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    root.mainloop()